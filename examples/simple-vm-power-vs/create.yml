---
- name: POWER VSI Creation Demo
  hosts: all
  collections:
   - ibm.cloudcollection
  vars:
    pi_name: ansible-demo-power-vm
    sys_type: s922
    pi_image: "rhel-90-07062022_Tier1"
    proc_type: shared
    processors: "0.25"
    memory: "2"
    storage_type: tier1
    pi_cloud_instance_id: "1370c926-55ef-42ab-b5d7-5f6307595b37"
    region: "osa"
    zone: "osa21"
    ssh_public_key: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCs6LQygr7RvRmis87tUG4e8KuRlQX75vXi1tsOeHHUdSrsURidrOfFOytkr/+Z04L2fRQeDGOTPwVlM3sbweRslU4shgCd0mxs9U4BIdXMThUhUPxxbA1OPaEu5frOkuJ256KmFbRDfCbIVn2yhqcL3yLKj+3mlZZ8Yq3978YkPoSa2H8WLmAbQKVPPH7Qqw+MjhBqEsFWWAP0ebwSteeF3dsr+NKWoJkiLRxiYM4HCtdPUO++s0/qMcyLeLds8PtRjJgqzLLsZu9kYAxedsb2FYF/AAP1MUOCo13MiMC/g527kzYHNTLncFEgVWV3fcNutC11DebTQGdgVJHdq5ieEJphCz4i7vrOQXVw/ffAxjptEZ3c2A5LLowxHLIIMvp0ML8wdNBQYBjXLk06xTOPGTI30qW5DOPU2OQVVHJR7fZ2j1F4F+hGCQmE1msVqyCJKl91hI1fsCFdlrZmrwrlmmY4whugp8EkPdPYcKASV0fL/zzlRD69GfTq41JVkrs= Ashwini.Kadam@ibm.com"
  environment:
        IC_API_KEY: "{{ lookup('env', 'IC_API_KEY') }}"
        shell: "echo $IC_API_KEY"
        IC_REGION: "osa"
        IC_ZONE: "osa21"
  tasks:
    - name: Check for existing SSH Key
      ibm_pi_key_info:
        pi_key_name: "{{ pi_name }}-ssh-key"
        pi_cloud_instance_id: "{{ pi_cloud_instance_id }}"
      failed_when:
        - pi_ssh_key_existing_output.rc != 0
        - '"does not exist" not in pi_ssh_key_existing_output.stderr'
      register: pi_ssh_key_existing_output

    - name: Save existing SSH Key as fact
      set_fact:
        cacheable: True
        pi_ssh_key: "{{ pi_ssh_key_existing_output.resource }}"
      when: pi_ssh_key_existing_output.resource.id is defined

    - name: Add new SSH Key
      ibm_pi_key:
        pi_key_name: "{{ pi_name }}-ssh-key"
        pi_ssh_key: "{{ ssh_public_key }}"
        pi_cloud_instance_id: "{{ pi_cloud_instance_id }}"
      register: pi_ssh_key_create_output
      when: pi_ssh_key_existing_output.resource.id is not defined

    - name: Save new SSH Key as fact
      set_fact:
        cacheable: True
        pi_ssh_key: "{{ pi_ssh_key_create_output.resource }}"
      when: pi_ssh_key_existing_output.resource.id is not defined

    - name: Retrieve image list
      ibm_pi_images_info:
        pi_cloud_instance_id: "{{ pi_cloud_instance_id }}"
      register: images_list

    - name: Set VM image name/id dictionary fact
      set_fact:
        image_dict: "{{ images_list.resource.image_info |
                        items2dict(key_name='name',
                        value_name='id') }}"

    - name: Check for existing network
      ibm_pi_network_info:
        pi_network_name: "{{ pi_name }}-network"
        pi_cloud_instance_id: "{{ pi_cloud_instance_id }}"
      failed_when:
        - pi_network_existing_output.rc != 0
        - '"unable to get network" not in pi_network_existing_output.stderr'
        - '"Error:item not found" not in pi_network_existing_output.stderr'
      register: pi_network_existing_output

    - name: Save existing network as fact
      set_fact:
        cacheable: True
        pi_network_id: "{{ pi_network_existing_output.resource.id }}"
      when: pi_network_existing_output.resource.id is defined

    - name: Add new network
      ibm_pi_network:
        pi_network_name: "{{ pi_name }}-network"
        pi_network_type: "pub-vlan"
        pi_cloud_instance_id: "{{ pi_cloud_instance_id }}"
      register: pi_network_create_output
      when: pi_network_existing_output.resource.id is not defined

    - name: Save new network as fact
      set_fact:
        cacheable: True
        pi_network_id: "{{ pi_network_create_output.resource.network_id }}"
      when: pi_network_existing_output.resource.id is not defined

    - name: Check for existing Virtual Server Instance
      ibm_pi_instance_info:
        pi_instance_name: "{{ pi_name }}"
        pi_cloud_instance_id: "{{ pi_cloud_instance_id }}"
      failed_when:
        - pi_instance_existing_output.rc != 0
        - '"does not exist" not in pi_instance_existing_output.stderr'
      register: pi_instance_existing_output

    - name: Save existing Power VSI fact
      set_fact:
        cacheable: True
        pi_instance: "{{ pi_instance_existing_output.resource }}"
      when: pi_instance_existing_output.rc == 0

    - name: Create a POWER Virtual Server Instance
      ibm_pi_instance:
        state: available
        pi_memory: "{{ memory }}"
        pi_processors: "{{ processors }}"
        pi_instance_name: "{{ pi_name }}"
        pi_proc_type: "{{ proc_type }}"
        pi_image_id: "{{ image_dict[pi_image] }}"
        pi_volume_ids: []
        pi_network:
          - network_id: "{{ pi_network_id }}"
        pi_key_pair_name: "{{ pi_ssh_key.pi_key_name }}"
        pi_sys_type: "{{ sys_type }}"
        pi_storage_type: "{{ storage_type }}"
        pi_replication_policy: none
        pi_replication_scheme: suffix
        pi_replicants: "1"
        pi_cloud_instance_id: "{{ pi_cloud_instance_id }}"
        id: "{{ pi_instance.resource.id | default(omit) }}"
      register: pi_instance_create_output
      when: pi_instance_existing_output.rc != 0

    - name: Check for existing Virtual Server Instance
      ibm_pi_instance_info:
        pi_instance_name: "{{ pi_name }}"
        pi_cloud_instance_id: "{{ pi_cloud_instance_id }}"
      register: pi_instance_new_output
      when: pi_instance_create_output.resource is defined

    - name: Save new Power VSI fact
      set_fact:
        cacheable: True
        pi_instance: "{{ pi_instance_new_output.resource }}"
      when: pi_instance_new_output.resource is defined

    - name: Print Public IP Address
      debug:
        var: pi_instance.addresses[0].external_ip

    - name: Add VSI to Ansible inventory
      add_host:
        name: "{{ pi_instance.addresses[0].external_ip }}"
        ansible_user: root
        groups: new_vsi
        ansible_ssh_extra_args: -o StrictHostKeyChecking=no

- name: Connect to VSI
  hosts: new_vsi
  gather_facts: False
  tasks:
    - name: Wait for VSI to become reachable over SSH
      wait_for_connection:

    - name: Collect OS login message
      command: cat /etc/motd
      register: os_motd

    - name: Print MOTD
      debug:
        var: os_motd.stdout_lines
